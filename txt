// import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
// import {
//   apiLogoffApp,
//   apiLoginApp,
//   apiupdateUser,
//   apiDeleteUser,
// } from "../../api";
// import { DeletUserProps, UpdateUeserProps } from "../../api/types";
// import { LoginUserProps, LogoffUserProps } from "../types/index";
// import { setTestAlert } from "./StatusApiAlertSlice";
// export type GetUser = {
//   id: string;
//   name: string;
//   email: string;
//   status: boolean;
//   password: string;
//   message?: [];
// };
// const initialState: GetUser = {
//   id: "",
//   name: "",
//   email: "",
//   password: "",
//   status: false,
// };

// export const loginUser = createAsyncThunk(
//   "auth/login",
//   async (login: LoginUserProps, { dispatch }) => {
//     const result = await apiLoginApp(login);
//     if (result.ok === false) {
//       dispatch(
//         setTestAlert({
//           msg: result.message,
//           type: "error",
//           open: "close",
//         })
//       );
//     }
//     sessionStorage.setItem("looged", result.data.status);
//     dispatch(
//       setTestAlert({
//         msg: result.message,
//         type: "success",
//         open: "close",
//       })
//     );
//     return result;
//   }
// );

// export const logoffUser = createAsyncThunk(
//   "user/logoffUser",
//   async (logoff: LogoffUserProps, { dispatch }) => {
//     try {
//       const result = await apiLogoffApp(logoff);
//       if (result.ok === false) {
//         dispatch(
//           setTestAlert({
//             msg: result.message,
//             type: "error",
//             open: "close",
//           })
//         );
//       }

//       dispatch(
//         setTestAlert({
//           msg: result.message,
//           type: "success",
//           open: "close",
//         })
//       );

//       return result;
//     } catch (data: any) {
//       return data.message;
//     }
//   }
// );

// export const editeUser = createAsyncThunk(
//   "user/editeUser",
//   async (user: UpdateUeserProps, { dispatch }) => {
//     try {
//       const result = await apiupdateUser(user);
//       let changes = {};

//       if (result.ok) {
//         changes = {
//           name: user.name,
//           password: user.password,
//         };
//         dispatch(
//           setTestAlert({
//             msg: result.message,
//             type: "success",
//             open: "close",
//           })
//         );
//       }
//       return {
//         id: user.id,
//         changes,
//       };
//     } catch (result: any) {
//       dispatch(
//         setTestAlert({
//           msg: result.message,
//           type: "error",
//           open: "close",
//         })
//       );
//       return result.message;
//     }
//   }
// );

// export const deleteUser = createAsyncThunk(
//   "user/deletUser",
//   async (user: DeletUserProps, { dispatch }) => {
//     try {
//       const result = await apiDeleteUser(user);
//       if (result.ok === false) {
//         dispatch(
//           setTestAlert({
//             msg: result.message,
//             type: "error",
//             open: "close",
//           })
//         );
//       }
//       dispatch(
//         setTestAlert({
//           msg: result.message,
//           type: "success",
//           open: "close",
//         })
//       );
//       return result;
//     } catch (result: any) {
//       dispatch(
//         setTestAlert({
//           msg: result.message,
//           type: "error",
//           open: "close",
//         })
//       );
//       return result.message;
//     }
//   }
// );

// const logSlice = createSlice({
//   name: "logUser",
//   initialState: initialState,
//   reducers: {
//     updateuser(state, action) {
//       state.name = action.payload.name;
//       state.password = action.payload.password;
//     },
//   },

//   extraReducers: (builder) => {
//     builder
//       .addCase(loginUser.fulfilled, (state, action) => {
//         const result = action.payload;

//         if (result.ok) {
//           return result.data;
//         }
//       })
//       .addCase(logoffUser.fulfilled, (state, action) => {
//         state.id = "";
//         state.name = "";
//         state.email = "";
//         state.password = "";
//         state.status = false;
//       })
//       .addCase(deleteUser.fulfilled, (state, action) => {
//         return initialState;
//       })
//       .addCase(editeUser.fulfilled, (state, action) => {});
//   },
// });
// export const { updateuser } = logSlice.actions;
// export default logSlice.reducer;

// abaixo mensagens a cima login

// import {
//     createAsyncThunk,
//     createEntityAdapter,
//     createSlice,
//     PayloadAction,
//   } from "@reduxjs/toolkit";
//   import { RootState } from "..";
//   import {
//     apiAddMessages,
//     apiDeleteMessages,
//     apiLoginApp,
//     apisaveMessages,
//     apiUpdateMessages,
//   } from "../../api";
//   import {
//     AddMessageProps,
//     DeletePopsMessage,
//     GetMessageProps,
//     LoginUserProps,
//     SaveMessageProps,
//   } from "../types/index";

//   const adapter = createEntityAdapter<GetMessageProps>({
//     selectId: (item) => item._id,
//   });

//   export const { selectAll: selectMessages, selectById } = adapter.getSelectors(
//     (state: RootState) => state.MessagsSlice
//   );

//   export const getAllMessages = createAsyncThunk(
//     "user/getAllmessages",
//     async (messages: LoginUserProps) => {
//       const result = await apiLoginApp(messages);

//       if (result.ok) {
//         return result.data.message;
//       }

//       return [];
//     }
//   );

//   export const addMesage = createAsyncThunk(
//     "user/addMessage",
//     async (message: AddMessageProps) => {
//       const result = await apiAddMessages({ ...message });
//       if (result.ok) {
//         return {
//           ok: true,
//           data: result,
//         };
//       }

//       return {
//         ok: false,
//       };
//     }
//   );

//   export const deletMessage = createAsyncThunk(
//     "user/deletMessage",
//     async (messages: DeletePopsMessage) => {
//       const result = await apiDeleteMessages(messages.id);
//       if (result.ok) {
//         return {
//           ok: true,
//           data: messages.id,
//         };
//       }

//       return {
//         ok: false,
//       };
//     }
//   );

//   export const updateMessage = createAsyncThunk(
//     "user/editeMessage",
//     async (message: any) => {
//       const { result } = await apiUpdateMessages(message);
//       let changes = {};

//       if (result.ok) {
//         changes = {
//           message: message.message,
//           descript: message.descript,
//           save: message.save,
//         };
//       }
//       return {
//         id: message.idCurrentMessage,
//         changes,
//       };
//     }
//   );

//   export const saveMessage = createAsyncThunk(
//     "user/saveMessage",
//     async (message: SaveMessageProps) => {
//       const result = await apisaveMessages(message);

//       let changes = {};

//       if (result.ok) {
//         changes = {
//           message: message.message,
//           descript: message.descript,
//           save: message.status,
//         };
//       }
//       return {
//         id: message.id,
//         changes,
//       };
//     }
//   );

//   const messagesSlice = createSlice({
//     name: "messages",
//     initialState: adapter.getInitialState(),
//     reducers: {
//       addOne: adapter.addOne,
//       remove: adapter.removeOne,
//       addMany: adapter.addMany,
//       updateOne: adapter.updateOne,
//     },
//     extraReducers: (builder) => {
//       builder
//         .addCase(
//           getAllMessages.fulfilled,
//           (state, action: PayloadAction<GetMessageProps[]>) => {
//             adapter.setAll(state, action.payload);
//           }
//         )
//         .addCase(addMesage.fulfilled, (state, action) => {
//           const result = action.payload.data.data;
//           adapter.addOne(state, result);
//         })
//         .addCase(deletMessage.fulfilled, (state, action) => {
//           if (action.payload.ok === true) {
//             const result = action.payload.data;
//             adapter.removeOne(state, result!);
//           }
//         })
//         .addCase(updateMessage.fulfilled, (state, action) => {});
//     },
//   });

//   export const { addOne, addMany, updateOne } = messagesSlice.actions;
//   export default messagesSlice.reducer;
